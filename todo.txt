TODO: Implement DOGE Reversal Strategy

1. Current Implementation (Using RANGE Strategy):
- Three-level scaling entry âœ“
  * Level 1: 0.38000 (2000 DOGE)
  * Level 2: 0.36500 (2500 DOGE)
  * Level 3: 0.35000 (3000 DOGE)

2. Future Improvements:
- Add trailing stop functionality:
  * Move stop loss up as price increases
  * Lock in profits on strong bounces
  * Consider 3% trailing distance

- Add position management features:
  * Scale out on the way up (partial take profits)
  * Move stop to break-even after partial fills
  * Dynamic position sizing based on volatility

3. Technical Indicators to Add:
  * RSI for oversold confirmation
  * Volume profile for support/resistance
  * Multiple timeframe analysis (1H, 4H)
  * MACD for trend confirmation

4. Risk Management Enhancements:
  * Maximum total position size limits
  * Daily loss limits
  * Profit taking rules
  * Maximum number of concurrent positions

5. Monitoring Improvements:
  * Price alerts at key levels
  * Notification system for fills
  * Daily P&L reporting
  * Strategy performance metrics

6. Testing Requirements:
  * Unit tests for trailing stop logic
  * Integration tests for order management
  * Test scenarios for partial fills
  * Performance testing with historical data

7. Logging & Error Tracking:
  * Implement Sentry for error tracking
  * Structured logging for all trades:
    - Entry/exit prices
    - Position sizes
    - P&L per trade
    - Execution times
    - Order fill details
  * Performance metrics logging:
    - Strategy win rate
    - Average R:R ratio
    - Drawdown tracking
    - Volume analysis
  * System health logging:
    - API response times
    - Order execution latency
    - Database performance
    - Memory usage

## AI Trade Monitor Feature
- Implement AI-based trade condition monitor that validates if initial entry conditions remain valid
- Required components:
  1. Entry Condition Documentation
     - Each trade strategy must document specific entry conditions:
       * Technical indicators (e.g. BB position, RSI levels)
       * Price action patterns
       * Support/resistance levels
       * Volume conditions
       * Market structure context
  
  2. Condition Monitoring System
     - Continuous monitoring of:
       * Changes in technical indicators
       * Violation of key levels
       * Volume profile changes
       * Market structure shifts
     - Real-time comparison with initial conditions
  
  3. Exit Signal Generation
     - Generate exit signals when:
       * Key entry conditions are invalidated
       * Market structure changes significantly
       * Risk/reward ratio becomes unfavorable
       * Technical setup breaks down

  4. Strategy Metadata Structure
     - Add to strategy config:
       ```json
       "entry_conditions": {
           "technical_indicators": [],
           "price_levels": [],
           "volume_criteria": [],
           "market_structure": [],
           "risk_reward_setup": {}
       }
       ```

Example for XRP BB Strategy:
```json
"entry_conditions": {
    "technical_indicators": [
        "Price above middle BB (2.2838)",
        "BBands widening indicating volatility",
        "Momentum positive above middle band"
    ],
    "price_levels": [
        "Support at middle BB: 2.2838",
        "Resistance target: 2.4200"
    ],
    "volume_criteria": [
        "Above average volume on upward moves",
        "Low volume on pullbacks"
    ],
    "market_structure": [
        "Higher highs and higher lows",
        "Middle BB acting as support"
    ],
    "risk_reward_setup": {
        "risk_per_trade": "$5.95",
        "potential_reward": "$34.05",
        "ratio": "5.7:1"
    }
}
```

## Error Handling & Strategy Isolation
- Implement robust error handling to prevent single strategy failures from stopping entire bot
  
  1. Strategy-Level Error Handling:
     * Isolate each strategy's execution in its own try-catch block
     * Log strategy-specific errors without propagating to main loop
     * Mark failed strategies as FAILED state instead of stopping bot
     * Implement automatic retry mechanism with exponential backoff
     * Add max retry attempts before permanently disabling strategy

  2. Error Classification System:
     * Categorize errors by severity:
       - CRITICAL: Requires bot shutdown (API keys invalid, account issues)
       - SEVERE: Disable specific strategy (invalid config, persistent errors)
       - WARNING: Log and retry (temporary API issues, rate limits)
       - INFO: Log only (order partially filled, minor issues)

  3. Strategy Health Monitoring:
     * Track error frequency per strategy
     * Implement circuit breaker pattern:
       - Disable strategies that fail too frequently
       - Auto-enable after cool-down period
       - Alert on repeated failures
     * Monitor strategy error rates and patterns

  4. Recovery Mechanisms:
     * Implement graceful degradation:
       - Continue running healthy strategies
       - Attempt to recover failed strategies in background
       - Maintain partial system functionality
     * Add strategy state recovery:
       - Persist strategy state before operations
       - Recover from last known good state
       - Handle incomplete operations

  5. Logging Enhancements:
     * Add detailed error context:
       - Strategy configuration
       - Market conditions
       - Order status
       - System state
     * Implement structured error logging:
       ```json
       {
           "strategy_name": "XRP BB Breakout Strategy",
           "error_type": "ConfigurationError",
           "severity": "SEVERE",
           "timestamp": "2023-12-01T17:46:55",
           "context": {
               "config": {...},
               "market_state": {...},
               "previous_errors": [...]
           }
       }
       ```

## Priority
- Critical: Implement basic strategy isolation immediately
- High: Add error classification and recovery mechanisms
- Medium: Enhance logging and monitoring systems

## Next Steps
1. Refactor main loop to handle strategy errors independently
2. Implement error classification system
3. Add strategy state persistence
4. Enhance logging with structured error data
5. Add circuit breaker pattern
6. Implement recovery mechanisms

# ... rest of existing content ...

Dec 01 21:58:48 gemini-trading-bot app/worker.1 INFO:StrategyManager:Creating strategy: DOGE BB Reversal Strategy take 2 12/1/24
Dec 01 21:58:48 gemini-trading-bot app/worker.1 INFO:StrategyService:Creating new strategy: DOGE BB Reversal Strategy take 2 12/1/24
Dec 01 21:58:48 gemini-trading-bot app/worker.1 INFO:__main__:Strategy DOGE BB Reversal Strategy take 2 12/1/24 updated
Dec 01 21:58:48 gemini-trading-bot app/worker.1 INFO:__main__:Processing strategy: XRP Momentum Continuation 2 12/2/24
Dec 01 21:58:48 gemini-trading-bot app/worker.1 INFO:StrategyManager:Creating strategy: XRP Momentum Continuation 2 12/2/24
Dec 01 21:58:48 gemini-trading-bot app/worker.1 ERROR:StrategyManager:Error creating strategy: Invalid configuration for strategy: XRP Momentum Continuation 2 12/2/24
Dec 01 21:58:48 gemini-trading-bot app/worker.1 ERROR:__main__:Error processing strategy XRP Momentum Continuation 2 12/2/24: Invalid configuration for strategy: XRP Momentum Continuation 2 12/2/24

Figure out why this is happening.

3 15:50:33 gemini-trading-bot app/worker.1 ERROR:StrategyService:Error in strategy XRP Momentum Continuation pt 2 12/3/24: 'last'
Dec 03 15:50:33 gemini-trading-bot app/worker.1 Traceback (most recent call last):
Dec 03 15:50:33 gemini-trading-bot app/worker.1   File "/app/trader/strategies.py", line 49, in execute
Dec 03 15:50:33 gemini-trading-bot app/worker.1     current_price = await service.get_current_price(strategy.symbol)
Dec 03 15:50:33 gemini-trading-bot app/worker.1                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Dec 03 15:50:33 gemini-trading-bot app/worker.1   File "/app/trader/services.py", line 100, in get_current_price
Dec 03 15:50:33 gemini-trading-bot app/worker.1     return await self.client.get_price(Symbol(symbol))
Dec 03 15:50:33 gemini-trading-bot app/worker.1            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Dec 03 15:50:33 gemini-trading-bot app/worker.1   File "/app/trader/gemini/decorators.py", line 63, in wrapper
Dec 03 15:50:33 gemini-trading-bot app/worker.1     response = await func(*args, **kwargs)
Dec 03 15:50:33 gemini-trading-bot app/worker.1                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
Dec 03 15:50:33 gemini-trading-bot app/worker.1   File "/app/trader/gemini/client.py", line 145, in get_price
Dec 03 15:50:33 gemini-trading-bot app/worker.1     return data['last']  # Returns last traded price
Dec 03 15:50:33 gemini-trading-bot app/worker.1            ~~~~^^^^^^^^
Dec 03 15:50:33 gemini-trading-bot app/worker.1 KeyError: 'last'

Figure out why this is happening.